package framework.view;

import framework.model.*;
import framework.database.Database;
import framework.model.Frame;

import javax.swing.*;
import java.awt.*;
import java.util.ArrayList;
import java.util.List;

public class AddAccountFrame<T extends Account> implements Frame {

    private final LabelTextFieldUIComponent nameField = new LabelTextFieldUIComponent("Name");
    private final LabelTextFieldUIComponent streetField = new LabelTextFieldUIComponent("Street");
    private final LabelTextFieldUIComponent cityField = new LabelTextFieldUIComponent("City");
    private final LabelTextFieldUIComponent stateField = new LabelTextFieldUIComponent("State");
    private final LabelTextFieldUIComponent zipField = new LabelTextFieldUIComponent("Zip");
    private final LabelTextFieldUIComponent emailField = new LabelTextFieldUIComponent("Email");
    private final List<Component> componentList;
    private final Database<T> database;
    private JFrame jFrame;
    private final String title;
    private int height = 350;

    public AddAccountFrame(Database<T> database, String title, int height) {
        this.height = height;
        this.database = database;
        this.title = title;
        this.componentList = new ArrayList<>();
        setupTextFields();
        initFrame(title);
    }

    public AddAccountFrame(Database<T> database, String title) {
        this.database = database;
        this.title = title;
        this.componentList = new ArrayList<>();
        setupTextFields();
        initFrame(title);
    }

    private void setupTextFields() {
        componentList.add(nameField.getUIComponent());
        componentList.add(streetField.getUIComponent());
        componentList.add(cityField.getUIComponent());
        componentList.add(stateField.getUIComponent());
        componentList.add(zipField.getUIComponent());
        componentList.add(emailField.getUIComponent());
        componentList.add(getButtons());
    }

    public void addComponentAtTop(Component component) {
        componentList.add(0, component);
        initFrame(title);
    }

    public void addComponentAtBottom(Component component) {
        componentList.add(componentList.size() - 1, component);
        initFrame(title);
    }

    private void initFrame(String title) {
        // This code is automatically generated by Visual Cafe when you add
        // components to the visual environment. It instantiates and initializes
        // the components. To modify the code, only use code syntax that matches
        // what Visual Cafe can generate, or Visual Cafe may be unable to back
        // parses your Java file into its visual environment.
        // {{ INIT_CONTROLS
        jFrame = new JFrame();
        jFrame.setTitle(title);
        jFrame.getContentPane().setLayout(null);
        jFrame.setSize(300, height);
        jFrame.setVisible(false);

        JPanel panel = new JPanel();
        panel.setBounds(10, 10, 250, height - 100);
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
        for (Component component : componentList) {
            panel.add(Box.createVerticalStrut(10));
            panel.add(component);
        }
        jFrame.getContentPane().add(panel);
    }

    public Component getButtons() {
        JPanel panel = new JPanel();
        panel.setBounds(10, 10, 250, 30);
        panel.setLayout(new BoxLayout(panel, BoxLayout.X_AXIS));
        JButton jButtonSave = new JButton("Save");
        jButtonSave.addActionListener(e -> onOkButtonPressed());
        JButton jButtonCancel = new JButton("Cancel");
        jButtonCancel.addActionListener(e -> onCancelButtonPressed());
        panel.add(jButtonSave);
        panel.add(Box.createHorizontalStrut(10));
        panel.add(jButtonCancel);
        return panel;
    }

    public void onOkButtonPressed() {
        String name = getName();
        String street = getStreet();
        String city = getCity();
        String state = getState();
        String zip = getZip();
        String email = getEmail();
        T account = (T) new DefaultAccount(new DefaultCustomer(name, street, city, state, zip, email),  new Notification<Transaction>() {
            @Override
            public boolean shouldSendNotification(Transaction transaction) {
                return false;
            }

            @Override
            public String getMessage(Transaction transaction) {
                return null;
            }
        });
        addAccount(account);
        dispose();
    }

    public void addAccount(T account) {
        database.addAccount(account);
    }

    public String getName() {
        return nameField.getText();
    }

    public String getStreet() {
        return streetField.getText();
    }

    public String getCity() {
        return cityField.getText();
    }

    public String getState() {
        return stateField.getText();
    }

    public String getZip() {
        return zipField.getText();
    }

    public String getEmail() {
        return emailField.getText();
    }

    void onCancelButtonPressed() {
        dispose();
    }

    @Override
    public void show() {
        jFrame.setVisible(true);
    }

    @Override
    public void dispose() {
        jFrame.dispose();
    }

}
